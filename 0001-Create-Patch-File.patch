From 24b05efa88a8d5fc49522eba37c08c9e97969942 Mon Sep 17 00:00:00 2001
From: syedmustaqhim <syedmustaqhim777@gmail.com>
Date: Fri, 24 Jul 2020 15:19:56 +0530
Subject: [PATCH] Create Patch File

---
 package-lock.json   |  2 +-
 package.json        |  2 +-
 src/App.tsx         | 28 +++++++++++++++++++++-------
 src/DataStreamer.ts |  2 +-
 src/Graph.tsx       | 15 ++++++++++++---
 tsconfig.json       |  2 +-
 6 files changed, 37 insertions(+), 14 deletions(-)

diff --git a/package-lock.json b/package-lock.json
index 3c8c001..c062360 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -19608,4 +19608,4 @@
       }
     }
   }
-}
+}
\ No newline at end of file
diff --git a/package.json b/package.json
index a8ddff6..1edc483 100644
--- a/package.json
+++ b/package.json
@@ -36,4 +36,4 @@
     "source-map-loader": "^0.2.4",
     "typescript": "^3.2.4"
   }
-}
+}
\ No newline at end of file
diff --git a/src/App.tsx b/src/App.tsx
index 0728518..6f09bb5 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean,
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
@@ -29,18 +31,30 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if (this.state.showGraph) {
+      return (<Graph data={this.state.data} />)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+    let x = 0;
+    const interval = setInterval(() => {
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
+        // Update the state by creating a new array of data that consists of
+        // Previous data in the state and the new data from server
+        this.setState({
+          data: serverResponds,
+          showGraph: true,
+        });
+      });
+      x++;
+      if (x > 1000) {
+        clearInterval(interval);
+      }
+    }, 100);
   }
 
   /**
@@ -59,7 +73,7 @@ class App extends Component<{}, IState> {
             // As part of your task, update the getDataFromServer() function
             // to keep requesting the data every 100ms until the app is closed
             // or the server does not return anymore data.
-            onClick={() => {this.getDataFromServer()}}>
+            onClick={() => { this.getDataFromServer() }}>
             Start Streaming Data
           </button>
           <div className="Graph">
diff --git a/src/DataStreamer.ts b/src/DataStreamer.ts
index 78583cb..70f89ec 100644
--- a/src/DataStreamer.ts
+++ b/src/DataStreamer.ts
@@ -29,7 +29,7 @@ class DataStreamer {
       if (request.status === 200) {
         callback(JSON.parse(request.responseText));
       } else {
-        alert ('Request failed');
+        alert('Request failed');
       }
     }
 
diff --git a/src/Graph.tsx b/src/Graph.tsx
index ec1430e..15a4a58 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -1,5 +1,5 @@
 import React, { Component } from 'react';
-import { Table } from '@jpmorganchase/perspective';
+import { Table } from '@finos/perspective';
 import { ServerRespond } from './DataStreamer';
 import './Graph.css';
 
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
 
@@ -32,7 +32,7 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -49,6 +49,15 @@ class Graph extends Component<IProps, {}> {
 
       // Add more Perspective configurations here.
       elem.load(this.table);
+      elem.setAttribute('view', 'y_line');
+      elem.setAttribute('column-pivots', '["stock"]');
+      elem.setAttribute('row-pivots', '["timestamp"]');
+      elem.setAttribute('columns', '["top_ask_price"]');
+      elem.setAttribute('aggregates', `
+      {"stock": "distinct count",
+      "top_ask_price":"avg",
+      "top_bid_price": "avg",
+      "timestamp":"distinct count"}`)
     }
   }
 
diff --git a/tsconfig.json b/tsconfig.json
index 0980b23..755462a 100644
--- a/tsconfig.json
+++ b/tsconfig.json
@@ -22,4 +22,4 @@
   "include": [
     "src"
   ]
-}
+}
\ No newline at end of file
-- 
2.26.2.windows.1

